# name: Build on DockerHub and Deploy to AWS
# on:
#   push:
#     branches:
#       - qubitsfrontend
# env:
#   DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
#   DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
#   AWS_PRIVATE_KEY: ${{ secrets.AWS_PRIVATE_KEY }}
#   QBFRONT_HOST_DNS: ${{ secrets.QBFRONT_HOST_DNS }}
#   QBFRONT_USERNAME: ${{ secrets.QBFRONT_USERNAME }}
# jobs:
#   build:
#     runs-on: ubuntu-latest
#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v2
#       - name: Set up Docker Buildx
#         uses: docker/setup-buildx-action@v1
#       - name: Login to DockerHub
#         uses: docker/login-action@v1
#         with:
#           username: ${{ secrets.DOCKERHUB_USERNAME }}
#           password: ${{ secrets.DOCKERHUB_TOKEN }}
#       - name: Build and push Docker image
#         uses: docker/build-push-action@v2
#         with:
#           context: ./
#           push: true
#           Dockerfile: ./Dockerfile
#           tags: karthickmuppilirajan/qbfrontend:latest
#   # deploy:
  #   needs: build
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v2
  #     - name: Login to Docker Hub
  #       uses: docker/login-action@v1
  #       with:
  #         username: ${{ env.DOCKERHUB_USERNAME }}
  #         password: ${{ env.DOCKERHUB_TOKEN }}
  #     # - name: Set permissions for private key
  #     #   run: |
  #     #     echo "${{ secrets.AWS_PRIVATE_KEY }}" | base64 -d > key.pem
  #     #     chmod 600 key.pem
  #     - name: SSH into EC2 and Run Script
  #       uses: appleboy/ssh-action@master
  #       with:
  #         host: ${{ secrets.QBFRONT_HOST_DNS }}
  #         username: ${{ secrets.QBFRONT_USERNAME }}
  #         key: ${{ secrets.AWS_PRIVATE_KEY }} 
  #         script: |
  #           sudo docker pull karthickmuppilirajan/qbfrontend:latest
  #           sudo docker ps -a
  #           sudo docker stop qbfrontend
  #           sudo docker rm qbfrontend
  #           sudo docker run -d --name qbfrontend -p 80:3000 karthickmuppilirajan/qbfrontend:latest



  name: Create PR and Tag Docker Image

  on:
    push:
      branches:
        - qubitsfrontend  # Change this to your main branch
    pull_request:
      types:
        - opened
        - synchronize
  
  env:
    DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
    DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
  
  jobs:
    create-pr-and-tag-image:
      runs-on: ubuntu-latest
      steps:
        - name: Checkout code
          uses: actions/checkout@v2
  
        - name: Set up Docker Buildx
          uses: docker/setup-buildx-action@v1
  
        - name: Login to DockerHub
          uses: docker/login-action@v1
          with:
            username: ${{ secrets.DOCKERHUB_USERNAME }}
            password: ${{ secrets.DOCKERHUB_TOKEN }}
  
        - name: Determine PR number
          id: pr_number
          run: |
            echo "PR_NUMBER=$(curl -s -H \"Authorization: Bearer $GITHUB_TOKEN\" -X GET \"https://api.github.com/repos/${{ github.repository }}/commits/${{ github.sha }}/pulls\" | jq -r '.[0].number')" >> $GITHUB_ENV
    
        - name: Create branch for PR
          run: |
            git fetch origin
            git checkout -b pr/update-docker-tag-${{ env.PR_NUMBER }} origin/pr/update-docker-tag-${{ env.PR_NUMBER }}
    
        - name: Build Docker image
          run: docker build -t karthickmuppilirajan/qbfrontend:latest .
  
        - name: Tag Docker image with PR version
          run: docker tag karthickmuppilirajan/qbfrontend:latest karthickmuppilirajan/qbfrontend:pr${{ env.PR_NUMBER }}
  
        - name: Push Docker image with PR version tag
          run: docker push karthickmuppilirajan/qbfrontend:pr${{ env.PR_NUMBER }}
  
        - name: Create PR
          uses: peter-evans/create-pull-request@v3
          with:
            branch: pr/update-docker-tag-${{ env.PR_NUMBER }}
            commit-message: "Update Docker image tag to PR-${{ env.PR_NUMBER }}"
            title: "Update Docker image tag to PR-${{ env.PR_NUMBER }}"
            labels: "docker"
            base: qubitsfrontend
  


# name: Release and Push to ECR

# on:
#   push:
#     branches:
#       - qubitsfrontenddd

# jobs:
#   release:
#     runs-on: ubuntu-latest

#     steps:
#       - name: Checkout Repository
#         uses: actions/checkout@v2

#       - name: Create release-please-config.json
#         run: echo '{"plugins":["@release-please/update-version","@release-please/release-notes-generator","@release-please/changelog"]}' > release-please-config.json

#       - name: Set up Node.js
#         uses: actions/setup-node@v4
#         with:
#           node-version: '14'

#       - name: Install Dependencies
#         run: npm install

#       - name: Release Please
#         id: release
#         uses: google-github-actions/release-please-action@v4
#         with:
#           token: ${{ secrets.PAT }}

#   build_and_push:
#     needs: release
#     runs-on: ubuntu-latest

#     steps:
#       - name: Checkout Repository
#         uses: actions/checkout@v2

#       - name: Set up Docker Buildx
#         uses: docker/setup-buildx-action@v1

#       - name: Get Latest Release Version
#         id: get_release_version
#         run: |
#           # Get the latest release version
#           release_version=$(curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
#                             "https://api.github.com/repos/${{ github.repository }}/releases/latest" \
#                             | jq -r .tag_name)

#           # Use output variable to pass the release version to the next steps
#           echo "RELEASE_VERSION=${release_version}" >> $GITHUB_ENV

#       - name: Set Image Tag
#         run: echo "DOCKER_TAG=${{ env.RELEASE_VERSION }}" >> $GITHUB_ENV

#       - name: Build and Push Docker Image
#         run: |
#           docker buildx create --use
#           docker buildx build -t public.ecr.aws/n9k8h8q2/qubits-cdk:${DOCKER_TAG} .
#           docker tag public.ecr.aws/n9k8h8q2/qubits-cdk:${DOCKER_TAG} public.ecr.aws/n9k8h8q2/qubits-cdk:${DOCKER_TAG}
#           docker push public.ecr.aws/n9k8h8q2/qubits-cdk:${DOCKER_TAG}

# env:
#   AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
#   AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#   AWS_REGION: your-region


